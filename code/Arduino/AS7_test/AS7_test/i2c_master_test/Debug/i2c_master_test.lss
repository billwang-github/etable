
i2c_master_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001208  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  00800172  00800172  0000130e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a89c  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000209d  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002390  00000000  00000000  0000e0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b44  00000000  00000000  0001046c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000263b  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bbe  00000000  00000000  000135eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  000171a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_18>
      4c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_19>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_24>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
      ae:	00 03       	mulsu	r16, r16
      b0:	52 06       	cpc	r5, r18

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e8 e0       	ldi	r30, 0x08	; 8
      c6:	f2 e1       	ldi	r31, 0x12	; 18
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a2 37       	cpi	r26, 0x72	; 114
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	a2 e7       	ldi	r26, 0x72	; 114
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a1 30       	cpi	r26, 0x01	; 1
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	c9 e5       	ldi	r28, 0x59	; 89
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_global_ctors+0x10>
      ec:	21 97       	sbiw	r28, 0x01	; 1
      ee:	fe 01       	movw	r30, r28
      f0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__tablejump2__>
      f4:	c7 35       	cpi	r28, 0x57	; 87
      f6:	d1 07       	cpc	r29, r17
      f8:	c9 f7       	brne	.-14     	; 0xec <__do_global_ctors+0x8>
      fa:	0e 94 2e 03 	call	0x65c	; 0x65c <main>
      fe:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <setup>:
int i, j;
byte u8temp = 0x00;

void setup()
{
  Wire.begin();
     106:	8d e3       	ldi	r24, 0x3D	; 61
     108:	92 e0       	ldi	r25, 0x02	; 2
     10a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	40 e8       	ldi	r20, 0x80	; 128
     112:	55 e2       	ldi	r21, 0x25	; 37
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	87 e9       	ldi	r24, 0x97	; 151
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 36 02 	call	0x46c	; 0x46c <_ZN14HardwareSerial5beginEmh>
  Serial.begin(SERIAL_BAUD);
  Serial.println("I2C Master Read/Write Test");
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	71 e0       	ldi	r23, 0x01	; 1
     124:	87 e9       	ldi	r24, 0x97	; 151
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 82 03 	call	0x704	; 0x704 <_ZN5Print7printlnEPKc>

  // Set Height, master write
  Wire.beginTransmission(SLAVE_ADDRESS);
     12c:	68 e3       	ldi	r22, 0x38	; 56
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	8d e3       	ldi	r24, 0x3D	; 61
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN7TwoWire17beginTransmissionEi>
  payload[0] = 0x01;
     138:	e7 e8       	ldi	r30, 0x87	; 135
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 83       	st	Z, r24
  payload[1] = '1';
     140:	81 e3       	ldi	r24, 0x31	; 49
     142:	81 83       	std	Z+1, r24	; 0x01
  payload[2] = '2';
     144:	82 e3       	ldi	r24, 0x32	; 50
     146:	82 83       	std	Z+2, r24	; 0x02
  payload[3] = '3';
     148:	83 e3       	ldi	r24, 0x33	; 51
     14a:	83 83       	std	Z+3, r24	; 0x03
  Wire.write(payload, 4);
     14c:	44 e0       	ldi	r20, 0x04	; 4
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	bf 01       	movw	r22, r30
     152:	8d e3       	ldi	r24, 0x3D	; 61
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN7TwoWire5writeEPKhj>
  Wire.endTransmission();
     15a:	8d e3       	ldi	r24, 0x3D	; 61
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_ZN7TwoWire15endTransmissionEv>

00000162 <loop>:
}


void loop()
{
     162:	cf 93       	push	r28
  u8temp = ~u8temp;
     164:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     168:	80 95       	com	r24
     16a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
  // Write EEPROM, master write
  Serial.print("Write EEPROM....");
     16e:	6b e1       	ldi	r22, 0x1B	; 27
     170:	71 e0       	ldi	r23, 0x01	; 1
     172:	87 e9       	ldi	r24, 0x97	; 151
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN5Print5printEPKc>
  for (i = 0; i < 16; i++)
     17a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <i+0x1>
     17e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <i>
  {
    Wire.beginTransmission(SLAVE_ADDRESS);
    payload[0] = 0x04;
     182:	c4 e0       	ldi	r28, 0x04	; 4
void loop()
{
  u8temp = ~u8temp;
  // Write EEPROM, master write
  Serial.print("Write EEPROM....");
  for (i = 0; i < 16; i++)
     184:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <i>
     188:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <i+0x1>
     18c:	40 97       	sbiw	r24, 0x10	; 16
     18e:	64 f5       	brge	.+88     	; 0x1e8 <loop+0x86>
  {
    Wire.beginTransmission(SLAVE_ADDRESS);
     190:	68 e3       	ldi	r22, 0x38	; 56
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	8d e3       	ldi	r24, 0x3D	; 61
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN7TwoWire17beginTransmissionEi>
    payload[0] = 0x04;
     19c:	c0 93 87 01 	sts	0x0187, r28	; 0x800187 <payload>
    payload[1] = i;
     1a0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <i>
     1a4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <payload+0x1>
    //payload[2] = 0xC0 + i;
    payload[2] = u8temp;
     1a8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     1ac:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <payload+0x2>
    Wire.write(payload, 3);
     1b0:	43 e0       	ldi	r20, 0x03	; 3
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	67 e8       	ldi	r22, 0x87	; 135
     1b6:	71 e0       	ldi	r23, 0x01	; 1
     1b8:	8d e3       	ldi	r24, 0x3D	; 61
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN7TwoWire5writeEPKhj>
    Wire.endTransmission();
     1c0:	8d e3       	ldi	r24, 0x3D	; 61
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN7TwoWire15endTransmissionEv>
    delay(5);
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <delay>
void loop()
{
  u8temp = ~u8temp;
  // Write EEPROM, master write
  Serial.print("Write EEPROM....");
  for (i = 0; i < 16; i++)
     1d4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <i>
     1d8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <i+0x1>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <i+0x1>
     1e2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <i>
     1e6:	ce cf       	rjmp	.-100    	; 0x184 <loop+0x22>
    payload[2] = u8temp;
    Wire.write(payload, 3);
    Wire.endTransmission();
    delay(5);
  }
  Serial.println(payload[2],HEX);
     1e8:	40 e1       	ldi	r20, 0x10	; 16
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <payload+0x2>
     1f0:	87 e9       	ldi	r24, 0x97	; 151
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN5Print7printlnEhi>
    
  // Read EEPROM, master read  
  Serial.println("Read EEPROM....");
     1f8:	6c e2       	ldi	r22, 0x2C	; 44
     1fa:	71 e0       	ldi	r23, 0x01	; 1
     1fc:	87 e9       	ldi	r24, 0x97	; 151
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 82 03 	call	0x704	; 0x704 <_ZN5Print7printlnEPKc>
  Wire.beginTransmission(SLAVE_ADDRESS);
     204:	68 e3       	ldi	r22, 0x38	; 56
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	8d e3       	ldi	r24, 0x3D	; 61
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	0e 94 d3 05 	call	0xba6	; 0xba6 <_ZN7TwoWire17beginTransmissionEi>
  payload[0] = 0x03; // assign number of data and start address
     210:	83 e0       	ldi	r24, 0x03	; 3
     212:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <payload>
  payload[1] = 16;
     216:	80 e1       	ldi	r24, 0x10	; 16
     218:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <payload+0x1>
  payload[2] = 0;
     21c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <payload+0x2>
  Wire.write(payload, 3);
     220:	43 e0       	ldi	r20, 0x03	; 3
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	67 e8       	ldi	r22, 0x87	; 135
     226:	71 e0       	ldi	r23, 0x01	; 1
     228:	8d e3       	ldi	r24, 0x3D	; 61
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN7TwoWire5writeEPKhj>
  Wire.endTransmission();
     230:	8d e3       	ldi	r24, 0x3D	; 61
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN7TwoWire15endTransmissionEv>

 Wire.requestFrom(SLAVE_ADDRESS, 16);
     238:	40 e1       	ldi	r20, 0x10	; 16
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	68 e3       	ldi	r22, 0x38	; 56
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	8d e3       	ldi	r24, 0x3D	; 61
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7TwoWire11requestFromEii>
 j = 0;
     248:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <j+0x1>
     24c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <j>
 while (Wire.available()) // slave may send less than requested
     250:	8d e3       	ldi	r24, 0x3D	; 61
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN7TwoWire9availableEv>
     258:	89 2b       	or	r24, r25
     25a:	09 f1       	breq	.+66     	; 0x29e <loop+0x13c>
 {
   byte c = Wire.read(); // receive a byte as character
     25c:	8d e3       	ldi	r24, 0x3D	; 61
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7TwoWire4readEv>
   buff_ee[j++] = c;
     264:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <j>
     268:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <j+0x1>
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	50 93 74 01 	sts	0x0174, r21	; 0x800174 <j+0x1>
     276:	40 93 73 01 	sts	0x0173, r20	; 0x800173 <j>
     27a:	f9 01       	movw	r30, r18
     27c:	e9 58       	subi	r30, 0x89	; 137
     27e:	fe 4f       	sbci	r31, 0xFE	; 254
     280:	80 83       	st	Z, r24
   Serial.print(c, HEX);        // print the character
     282:	40 e1       	ldi	r20, 0x10	; 16
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	68 2f       	mov	r22, r24
     288:	87 e9       	ldi	r24, 0x97	; 151
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN5Print5printEhi>
   Serial.print(" ");
     290:	6c e3       	ldi	r22, 0x3C	; 60
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	87 e9       	ldi	r24, 0x97	; 151
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN5Print5printEPKc>
  Wire.write(payload, 3);
  Wire.endTransmission();

 Wire.requestFrom(SLAVE_ADDRESS, 16);
 j = 0;
 while (Wire.available()) // slave may send less than requested
     29c:	d9 cf       	rjmp	.-78     	; 0x250 <loop+0xee>
   byte c = Wire.read(); // receive a byte as character
   buff_ee[j++] = c;
   Serial.print(c, HEX);        // print the character
   Serial.print(" ");
 }
 Serial.println();      // prints another carriage return
     29e:	87 e9       	ldi	r24, 0x97	; 151
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN5Print7printlnEv>
 delay(500);
     2a6:	64 ef       	ldi	r22, 0xF4	; 244
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
  
}
     2ae:	cf 91       	pop	r28
   buff_ee[j++] = c;
   Serial.print(c, HEX);        // print the character
   Serial.print(" ");
 }
 Serial.println();      // prints another carriage return
 delay(500);
     2b0:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <delay>

000002b4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     2b4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     2b6:	91 8d       	ldd	r25, Z+25	; 0x19
     2b8:	22 8d       	ldd	r18, Z+26	; 0x1a
     2ba:	89 2f       	mov	r24, r25
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	80 5c       	subi	r24, 0xC0	; 192
     2c0:	9f 4f       	sbci	r25, 0xFF	; 255
     2c2:	82 1b       	sub	r24, r18
     2c4:	91 09       	sbc	r25, r1
}
     2c6:	8f 73       	andi	r24, 0x3F	; 63
     2c8:	99 27       	eor	r25, r25
     2ca:	08 95       	ret

000002cc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     2cc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     2ce:	91 8d       	ldd	r25, Z+25	; 0x19
     2d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     2d2:	98 17       	cp	r25, r24
     2d4:	31 f0       	breq	.+12     	; 0x2e2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     2d6:	82 8d       	ldd	r24, Z+26	; 0x1a
     2d8:	e8 0f       	add	r30, r24
     2da:	f1 1d       	adc	r31, r1
     2dc:	85 8d       	ldd	r24, Z+29	; 0x1d
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     2e6:	08 95       	ret

000002e8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     2e8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2ea:	91 8d       	ldd	r25, Z+25	; 0x19
     2ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     2ee:	98 17       	cp	r25, r24
     2f0:	61 f0       	breq	.+24     	; 0x30a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     2f4:	df 01       	movw	r26, r30
     2f6:	a8 0f       	add	r26, r24
     2f8:	b1 1d       	adc	r27, r1
     2fa:	5d 96       	adiw	r26, 0x1d	; 29
     2fc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2fe:	92 8d       	ldd	r25, Z+26	; 0x1a
     300:	9f 5f       	subi	r25, 0xFF	; 255
     302:	9f 73       	andi	r25, 0x3F	; 63
     304:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     30e:	08 95       	ret

00000310 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     310:	fc 01       	movw	r30, r24
     312:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     314:	44 8d       	ldd	r20, Z+28	; 0x1c
     316:	25 2f       	mov	r18, r21
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	84 2f       	mov	r24, r20
     31c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     31e:	82 1b       	sub	r24, r18
     320:	93 0b       	sbc	r25, r19
     322:	54 17       	cp	r21, r20
     324:	10 f0       	brcs	.+4      	; 0x32a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     326:	cf 96       	adiw	r24, 0x3f	; 63
     328:	08 95       	ret
  return tail - head - 1;
     32a:	01 97       	sbiw	r24, 0x01	; 1
}
     32c:	08 95       	ret

0000032e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     32e:	86 ef       	ldi	r24, 0xF6	; 246
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	89 2b       	or	r24, r25
     334:	49 f0       	breq	.+18     	; 0x348 <_Z14serialEventRunv+0x1a>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	89 2b       	or	r24, r25
     33c:	29 f0       	breq	.+10     	; 0x348 <_Z14serialEventRunv+0x1a>
     33e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z17Serial0_availablev>
     342:	81 11       	cpse	r24, r1
     344:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     348:	08 95       	ret

0000034a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     34a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     34c:	84 8d       	ldd	r24, Z+28	; 0x1c
     34e:	df 01       	movw	r26, r30
     350:	a8 0f       	add	r26, r24
     352:	b1 1d       	adc	r27, r1
     354:	a3 5a       	subi	r26, 0xA3	; 163
     356:	bf 4f       	sbci	r27, 0xFF	; 255
     358:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     35a:	84 8d       	ldd	r24, Z+28	; 0x1c
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	8f 73       	andi	r24, 0x3F	; 63
     362:	99 27       	eor	r25, r25
     364:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     366:	a6 89       	ldd	r26, Z+22	; 0x16
     368:	b7 89       	ldd	r27, Z+23	; 0x17
     36a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     36c:	a0 89       	ldd	r26, Z+16	; 0x10
     36e:	b1 89       	ldd	r27, Z+17	; 0x11
     370:	8c 91       	ld	r24, X
     372:	83 70       	andi	r24, 0x03	; 3
     374:	80 64       	ori	r24, 0x40	; 64
     376:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     378:	93 8d       	ldd	r25, Z+27	; 0x1b
     37a:	84 8d       	ldd	r24, Z+28	; 0x1c
     37c:	98 13       	cpse	r25, r24
     37e:	06 c0       	rjmp	.+12     	; 0x38c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     380:	02 88       	ldd	r0, Z+18	; 0x12
     382:	f3 89       	ldd	r31, Z+19	; 0x13
     384:	e0 2d       	mov	r30, r0
     386:	80 81       	ld	r24, Z
     388:	8f 7d       	andi	r24, 0xDF	; 223
     38a:	80 83       	st	Z, r24
     38c:	08 95       	ret

0000038e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	ec 01       	movw	r28, r24
  _written = true;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3a4:	98 13       	cpse	r25, r24
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <_ZN14HardwareSerial5writeEh+0x24>
     3a8:	e8 89       	ldd	r30, Y+16	; 0x10
     3aa:	f9 89       	ldd	r31, Y+17	; 0x11
     3ac:	80 81       	ld	r24, Z
     3ae:	85 fd       	sbrc	r24, 5
     3b0:	26 c0       	rjmp	.+76     	; 0x3fe <_ZN14HardwareSerial5writeEh+0x70>
     3b2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	0f 73       	andi	r16, 0x3F	; 63
     3be:	11 27       	eor	r17, r17
     3c0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3c4:	e8 12       	cpse	r14, r24
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	07 fc       	sbrc	r0, 7
     3cc:	fa cf       	rjmp	.-12     	; 0x3c2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     3ce:	e8 89       	ldd	r30, Y+16	; 0x10
     3d0:	f9 89       	ldd	r31, Y+17	; 0x11
     3d2:	80 81       	ld	r24, Z
     3d4:	85 ff       	sbrs	r24, 5
     3d6:	f5 cf       	rjmp	.-22     	; 0x3c2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     3de:	f1 cf       	rjmp	.-30     	; 0x3c2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     3e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e2:	fe 01       	movw	r30, r28
     3e4:	e8 0f       	add	r30, r24
     3e6:	f1 1d       	adc	r31, r1
     3e8:	e3 5a       	subi	r30, 0xA3	; 163
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3ee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f0:	f8 94       	cli
    _tx_buffer_head = i;
     3f2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     3f4:	ea 89       	ldd	r30, Y+18	; 0x12
     3f6:	fb 89       	ldd	r31, Y+19	; 0x13
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3fe:	9f b7       	in	r25, 0x3f	; 63
     400:	f8 94       	cli
      *_udr = c;
     402:	ee 89       	ldd	r30, Y+22	; 0x16
     404:	ff 89       	ldd	r31, Y+23	; 0x17
     406:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     408:	e8 89       	ldd	r30, Y+16	; 0x10
     40a:	f9 89       	ldd	r31, Y+17	; 0x11
     40c:	80 81       	ld	r24, Z
     40e:	83 70       	andi	r24, 0x03	; 3
     410:	80 64       	ori	r24, 0x40	; 64
     412:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     414:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     42e:	88 8d       	ldd	r24, Y+24	; 0x18
     430:	88 23       	and	r24, r24
     432:	c9 f0       	breq	.+50     	; 0x466 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     434:	ea 89       	ldd	r30, Y+18	; 0x12
     436:	fb 89       	ldd	r31, Y+19	; 0x13
     438:	80 81       	ld	r24, Z
     43a:	85 fd       	sbrc	r24, 5
     43c:	05 c0       	rjmp	.+10     	; 0x448 <_ZN14HardwareSerial5flushEv+0x20>
     43e:	a8 89       	ldd	r26, Y+16	; 0x10
     440:	b9 89       	ldd	r27, Y+17	; 0x11
     442:	8c 91       	ld	r24, X
     444:	86 fd       	sbrc	r24, 6
     446:	0f c0       	rjmp	.+30     	; 0x466 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	07 fc       	sbrc	r0, 7
     44c:	f5 cf       	rjmp	.-22     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
     44e:	80 81       	ld	r24, Z
     450:	85 ff       	sbrs	r24, 5
     452:	f2 cf       	rjmp	.-28     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     454:	a8 89       	ldd	r26, Y+16	; 0x10
     456:	b9 89       	ldd	r27, Y+17	; 0x11
     458:	8c 91       	ld	r24, X
     45a:	85 ff       	sbrs	r24, 5
     45c:	ed cf       	rjmp	.-38     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     45e:	ce 01       	movw	r24, r28
     460:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     464:	e7 cf       	rjmp	.-50     	; 0x434 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
     47c:	6a 01       	movw	r12, r20
     47e:	7b 01       	movw	r14, r22
     480:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     482:	e8 89       	ldd	r30, Y+16	; 0x10
     484:	f9 89       	ldd	r31, Y+17	; 0x11
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     48a:	41 15       	cp	r20, r1
     48c:	51 4e       	sbci	r21, 0xE1	; 225
     48e:	61 05       	cpc	r22, r1
     490:	71 05       	cpc	r23, r1
     492:	b1 f0       	breq	.+44     	; 0x4c0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	79 e0       	ldi	r23, 0x09	; 9
     498:	8d e3       	ldi	r24, 0x3D	; 61
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a7 01       	movw	r20, r14
     49e:	96 01       	movw	r18, r12
     4a0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__udivmodsi4>
     4a4:	da 01       	movw	r26, r20
     4a6:	c9 01       	movw	r24, r18
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	a1 09       	sbc	r26, r1
     4ac:	b1 09       	sbc	r27, r1
     4ae:	b6 95       	lsr	r27
     4b0:	a7 95       	ror	r26
     4b2:	97 95       	ror	r25
     4b4:	87 95       	ror	r24
     4b6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     4b8:	21 15       	cp	r18, r1
     4ba:	80 e1       	ldi	r24, 0x10	; 16
     4bc:	38 07       	cpc	r19, r24
     4be:	a8 f0       	brcs	.+42     	; 0x4ea <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     4c0:	e8 89       	ldd	r30, Y+16	; 0x10
     4c2:	f9 89       	ldd	r31, Y+17	; 0x11
     4c4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     4c6:	60 e8       	ldi	r22, 0x80	; 128
     4c8:	74 e8       	ldi	r23, 0x84	; 132
     4ca:	8e e1       	ldi	r24, 0x1E	; 30
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a7 01       	movw	r20, r14
     4d0:	96 01       	movw	r18, r12
     4d2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__udivmodsi4>
     4d6:	da 01       	movw	r26, r20
     4d8:	c9 01       	movw	r24, r18
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	a1 09       	sbc	r26, r1
     4de:	b1 09       	sbc	r27, r1
     4e0:	b6 95       	lsr	r27
     4e2:	a7 95       	ror	r26
     4e4:	97 95       	ror	r25
     4e6:	87 95       	ror	r24
     4e8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     4ea:	ec 85       	ldd	r30, Y+12	; 0x0c
     4ec:	fd 85       	ldd	r31, Y+13	; 0x0d
     4ee:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     4f0:	ee 85       	ldd	r30, Y+14	; 0x0e
     4f2:	ff 85       	ldd	r31, Y+15	; 0x0f
     4f4:	20 83       	st	Z, r18

  _written = false;
     4f6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     4f8:	ec 89       	ldd	r30, Y+20	; 0x14
     4fa:	fd 89       	ldd	r31, Y+21	; 0x15
     4fc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     4fe:	ea 89       	ldd	r30, Y+18	; 0x12
     500:	fb 89       	ldd	r31, Y+19	; 0x13
     502:	80 81       	ld	r24, Z
     504:	80 61       	ori	r24, 0x10	; 16
     506:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     508:	ea 89       	ldd	r30, Y+18	; 0x12
     50a:	fb 89       	ldd	r31, Y+19	; 0x13
     50c:	80 81       	ld	r24, Z
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	fb 89       	ldd	r31, Y+19	; 0x13
     516:	80 81       	ld	r24, Z
     518:	80 68       	ori	r24, 0x80	; 128
     51a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     51c:	ea 89       	ldd	r30, Y+18	; 0x12
     51e:	fb 89       	ldd	r31, Y+19	; 0x13
     520:	80 81       	ld	r24, Z
     522:	8f 7d       	andi	r24, 0xDF	; 223
     524:	80 83       	st	Z, r24
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	08 95       	ret

0000053c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	2f 93       	push	r18
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     550:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <Serial+0x10>
     554:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <Serial+0x11>
     558:	80 81       	ld	r24, Z
     55a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <Serial+0x16>
     55e:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <Serial+0x17>
     562:	82 fd       	sbrc	r24, 2
     564:	12 c0       	rjmp	.+36     	; 0x58a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     566:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     568:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <Serial+0x19>
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     570:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <Serial+0x1a>
     574:	82 17       	cp	r24, r18
     576:	51 f0       	breq	.+20     	; 0x58c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     578:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <Serial+0x19>
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	e9 56       	subi	r30, 0x69	; 105
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     584:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <Serial+0x19>
     588:	01 c0       	rjmp	.+2      	; 0x58c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     58a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	9f 91       	pop	r25
     592:	8f 91       	pop	r24
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     5c2:	87 e9       	ldi	r24, 0x97	; 151
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	7f 91       	pop	r23
     5d8:	6f 91       	pop	r22
     5da:	5f 91       	pop	r21
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     5ec:	87 e9       	ldi	r24, 0x97	; 151
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN14HardwareSerial9availableEv>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	89 2b       	or	r24, r25
     5f8:	09 f4       	brne	.+2      	; 0x5fc <_Z17Serial0_availablev+0x10>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
}
     5fc:	82 2f       	mov	r24, r18
     5fe:	08 95       	ret

00000600 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     600:	e7 e9       	ldi	r30, 0x97	; 151
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	13 82       	std	Z+3, r1	; 0x03
     606:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     608:	88 ee       	ldi	r24, 0xE8	; 232
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	84 83       	std	Z+4, r24	; 0x04
     612:	95 83       	std	Z+5, r25	; 0x05
     614:	a6 83       	std	Z+6, r26	; 0x06
     616:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     618:	82 e4       	ldi	r24, 0x42	; 66
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	91 83       	std	Z+1, r25	; 0x01
     61e:	80 83       	st	Z, r24
     620:	85 ec       	ldi	r24, 0xC5	; 197
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	95 87       	std	Z+13, r25	; 0x0d
     626:	84 87       	std	Z+12, r24	; 0x0c
     628:	84 ec       	ldi	r24, 0xC4	; 196
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	97 87       	std	Z+15, r25	; 0x0f
     62e:	86 87       	std	Z+14, r24	; 0x0e
     630:	80 ec       	ldi	r24, 0xC0	; 192
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	91 8b       	std	Z+17, r25	; 0x11
     636:	80 8b       	std	Z+16, r24	; 0x10
     638:	81 ec       	ldi	r24, 0xC1	; 193
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	93 8b       	std	Z+19, r25	; 0x13
     63e:	82 8b       	std	Z+18, r24	; 0x12
     640:	82 ec       	ldi	r24, 0xC2	; 194
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	95 8b       	std	Z+21, r25	; 0x15
     646:	84 8b       	std	Z+20, r24	; 0x14
     648:	86 ec       	ldi	r24, 0xC6	; 198
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	97 8b       	std	Z+23, r25	; 0x17
     64e:	86 8b       	std	Z+22, r24	; 0x16
     650:	11 8e       	std	Z+25, r1	; 0x19
     652:	12 8e       	std	Z+26, r1	; 0x1a
     654:	13 8e       	std	Z+27, r1	; 0x1b
     656:	14 8e       	std	Z+28, r1	; 0x1c
     658:	08 95       	ret

0000065a <initVariant>:
     65a:	08 95       	ret

0000065c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     65c:	0e 94 ae 04 	call	0x95c	; 0x95c <init>

	initVariant();
     660:	0e 94 2d 03 	call	0x65a	; 0x65a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     664:	0e 94 83 00 	call	0x106	; 0x106 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     668:	c7 e9       	ldi	r28, 0x97	; 151
     66a:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     66c:	0e 94 b1 00 	call	0x162	; 0x162 <loop>
		if (serialEventRun) serialEventRun();
     670:	20 97       	sbiw	r28, 0x00	; 0
     672:	e1 f3       	breq	.-8      	; 0x66c <main+0x10>
     674:	0e 94 97 01 	call	0x32e	; 0x32e <_Z14serialEventRunv>
     678:	f9 cf       	rjmp	.-14     	; 0x66c <main+0x10>

0000067a <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	6c 01       	movw	r12, r24
     68c:	7a 01       	movw	r14, r20
     68e:	8b 01       	movw	r16, r22
     690:	c0 e0       	ldi	r28, 0x00	; 0
     692:	d0 e0       	ldi	r29, 0x00	; 0
     694:	ce 15       	cp	r28, r14
     696:	df 05       	cpc	r29, r15
     698:	81 f0       	breq	.+32     	; 0x6ba <_ZN5Print5writeEPKhj+0x40>
     69a:	d8 01       	movw	r26, r16
     69c:	6d 91       	ld	r22, X+
     69e:	8d 01       	movw	r16, r26
     6a0:	d6 01       	movw	r26, r12
     6a2:	ed 91       	ld	r30, X+
     6a4:	fc 91       	ld	r31, X
     6a6:	01 90       	ld	r0, Z+
     6a8:	f0 81       	ld	r31, Z
     6aa:	e0 2d       	mov	r30, r0
     6ac:	c6 01       	movw	r24, r12
     6ae:	09 95       	icall
     6b0:	89 2b       	or	r24, r25
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <_ZN5Print5writeEPKhj+0x3e>
     6b4:	21 96       	adiw	r28, 0x01	; 1
     6b6:	ee cf       	rjmp	.-36     	; 0x694 <_ZN5Print5writeEPKhj+0x1a>
     6b8:	7e 01       	movw	r14, r28
     6ba:	c7 01       	movw	r24, r14
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	08 95       	ret

000006ce <_ZN5Print5writeEPKc>:
     6ce:	61 15       	cp	r22, r1
     6d0:	71 05       	cpc	r23, r1
     6d2:	79 f0       	breq	.+30     	; 0x6f2 <_ZN5Print5writeEPKc+0x24>
     6d4:	fb 01       	movw	r30, r22
     6d6:	01 90       	ld	r0, Z+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <_ZN5Print5writeEPKc+0x8>
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	af 01       	movw	r20, r30
     6e0:	46 1b       	sub	r20, r22
     6e2:	57 0b       	sbc	r21, r23
     6e4:	dc 01       	movw	r26, r24
     6e6:	ed 91       	ld	r30, X+
     6e8:	fc 91       	ld	r31, X
     6ea:	02 80       	ldd	r0, Z+2	; 0x02
     6ec:	f3 81       	ldd	r31, Z+3	; 0x03
     6ee:	e0 2d       	mov	r30, r0
     6f0:	09 94       	ijmp
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 95       	ret

000006f8 <_ZN5Print5printEPKc>:
     6f8:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_ZN5Print5writeEPKc>

000006fc <_ZN5Print7printlnEv>:
     6fc:	60 e5       	ldi	r22, 0x50	; 80
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_ZN5Print5writeEPKc>

00000704 <_ZN5Print7printlnEPKc>:
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
     70e:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Print5writeEPKc>
     712:	8c 01       	movw	r16, r24
     714:	ce 01       	movw	r24, r28
     716:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN5Print7printlnEv>
     71a:	80 0f       	add	r24, r16
     71c:	91 1f       	adc	r25, r17
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	a1 97       	sbiw	r28, 0x21	; 33
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	7c 01       	movw	r14, r24
     74e:	fa 01       	movw	r30, r20
     750:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     752:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     754:	22 30       	cpi	r18, 0x02	; 2
     756:	08 f4       	brcc	.+2      	; 0x75a <_ZN5Print11printNumberEmh+0x32>
     758:	2a e0       	ldi	r18, 0x0A	; 10
     75a:	8e 01       	movw	r16, r28
     75c:	0f 5d       	subi	r16, 0xDF	; 223
     75e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     760:	82 2e       	mov	r8, r18
     762:	91 2c       	mov	r9, r1
     764:	a1 2c       	mov	r10, r1
     766:	b1 2c       	mov	r11, r1
     768:	bf 01       	movw	r22, r30
     76a:	a5 01       	movw	r20, r10
     76c:	94 01       	movw	r18, r8
     76e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__udivmodsi4>
    n /= base;
     772:	f9 01       	movw	r30, r18
     774:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     776:	01 50       	subi	r16, 0x01	; 1
     778:	11 09       	sbc	r17, r1
     77a:	6a 30       	cpi	r22, 0x0A	; 10
     77c:	10 f4       	brcc	.+4      	; 0x782 <_ZN5Print11printNumberEmh+0x5a>
     77e:	60 5d       	subi	r22, 0xD0	; 208
     780:	01 c0       	rjmp	.+2      	; 0x784 <_ZN5Print11printNumberEmh+0x5c>
     782:	69 5c       	subi	r22, 0xC9	; 201
     784:	d8 01       	movw	r26, r16
     786:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     788:	23 2b       	or	r18, r19
     78a:	24 2b       	or	r18, r20
     78c:	25 2b       	or	r18, r21
     78e:	61 f7       	brne	.-40     	; 0x768 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     790:	b8 01       	movw	r22, r16
     792:	c7 01       	movw	r24, r14
     794:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Print5writeEPKc>
}
     798:	a1 96       	adiw	r28, 0x21	; 33
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	08 95       	ret

000007ba <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     7ba:	21 15       	cp	r18, r1
     7bc:	31 05       	cpc	r19, r1
     7be:	41 f4       	brne	.+16     	; 0x7d0 <_ZN5Print5printEmi+0x16>
     7c0:	dc 01       	movw	r26, r24
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	01 90       	ld	r0, Z+
     7c8:	f0 81       	ld	r31, Z
     7ca:	e0 2d       	mov	r30, r0
     7cc:	64 2f       	mov	r22, r20
     7ce:	09 94       	ijmp
  else return printNumber(n, base);
     7d0:	0c 94 94 03 	jmp	0x728	; 0x728 <_ZN5Print11printNumberEmh>

000007d4 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     7d4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     7d6:	46 2f       	mov	r20, r22
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_ZN5Print5printEmi>

000007e2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
     7ec:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN5Print5printEhi>
     7f0:	8c 01       	movw	r16, r24
  n += println();
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN5Print7printlnEv>
  return n;
}
     7f8:	80 0f       	add	r24, r16
     7fa:	91 1f       	adc	r25, r17
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <timer0_millis>
     820:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <timer0_millis+0x1>
     824:	a0 91 37 02 	lds	r26, 0x0237	; 0x800237 <timer0_millis+0x2>
     828:	b0 91 38 02 	lds	r27, 0x0238	; 0x800238 <timer0_millis+0x3>
     82c:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <timer0_fract>
     830:	23 e0       	ldi	r18, 0x03	; 3
     832:	23 0f       	add	r18, r19
     834:	2d 37       	cpi	r18, 0x7D	; 125
     836:	20 f4       	brcc	.+8      	; 0x840 <__vector_16+0x3a>
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	a1 1d       	adc	r26, r1
     83c:	b1 1d       	adc	r27, r1
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__vector_16+0x44>
     840:	26 e8       	ldi	r18, 0x86	; 134
     842:	23 0f       	add	r18, r19
     844:	02 96       	adiw	r24, 0x02	; 2
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <timer0_fract>
     84e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <timer0_millis>
     852:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <timer0_millis+0x1>
     856:	a0 93 37 02 	sts	0x0237, r26	; 0x800237 <timer0_millis+0x2>
     85a:	b0 93 38 02 	sts	0x0238, r27	; 0x800238 <timer0_millis+0x3>
     85e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timer0_overflow_count>
     862:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timer0_overflow_count+0x1>
     866:	a0 91 3b 02 	lds	r26, 0x023B	; 0x80023b <timer0_overflow_count+0x2>
     86a:	b0 91 3c 02 	lds	r27, 0x023C	; 0x80023c <timer0_overflow_count+0x3>
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	a1 1d       	adc	r26, r1
     872:	b1 1d       	adc	r27, r1
     874:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <timer0_overflow_count>
     878:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <timer0_overflow_count+0x1>
     87c:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <timer0_overflow_count+0x2>
     880:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <timer0_overflow_count+0x3>
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	3f 91       	pop	r19
     88e:	2f 91       	pop	r18
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <micros>:
     89a:	3f b7       	in	r19, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timer0_overflow_count>
     8a2:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timer0_overflow_count+0x1>
     8a6:	a0 91 3b 02 	lds	r26, 0x023B	; 0x80023b <timer0_overflow_count+0x2>
     8aa:	b0 91 3c 02 	lds	r27, 0x023C	; 0x80023c <timer0_overflow_count+0x3>
     8ae:	26 b5       	in	r18, 0x26	; 38
     8b0:	a8 9b       	sbis	0x15, 0	; 21
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <micros+0x24>
     8b4:	2f 3f       	cpi	r18, 0xFF	; 255
     8b6:	19 f0       	breq	.+6      	; 0x8be <micros+0x24>
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	a1 1d       	adc	r26, r1
     8bc:	b1 1d       	adc	r27, r1
     8be:	3f bf       	out	0x3f, r19	; 63
     8c0:	ba 2f       	mov	r27, r26
     8c2:	a9 2f       	mov	r26, r25
     8c4:	98 2f       	mov	r25, r24
     8c6:	88 27       	eor	r24, r24
     8c8:	82 0f       	add	r24, r18
     8ca:	91 1d       	adc	r25, r1
     8cc:	a1 1d       	adc	r26, r1
     8ce:	b1 1d       	adc	r27, r1
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	42 e0       	ldi	r20, 0x02	; 2
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	88 1f       	adc	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	4a 95       	dec	r20
     8e0:	d1 f7       	brne	.-12     	; 0x8d6 <micros+0x3c>
     8e2:	08 95       	ret

000008e4 <delay>:
     8e4:	8f 92       	push	r8
     8e6:	9f 92       	push	r9
     8e8:	af 92       	push	r10
     8ea:	bf 92       	push	r11
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
     8f8:	0e 94 4d 04 	call	0x89a	; 0x89a <micros>
     8fc:	4b 01       	movw	r8, r22
     8fe:	5c 01       	movw	r10, r24
     900:	c1 14       	cp	r12, r1
     902:	d1 04       	cpc	r13, r1
     904:	e1 04       	cpc	r14, r1
     906:	f1 04       	cpc	r15, r1
     908:	01 f1       	breq	.+64     	; 0x94a <__stack+0x4b>
     90a:	0e 94 56 06 	call	0xcac	; 0xcac <yield>
     90e:	0e 94 4d 04 	call	0x89a	; 0x89a <micros>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	88 19       	sub	r24, r8
     918:	99 09       	sbc	r25, r9
     91a:	aa 09       	sbc	r26, r10
     91c:	bb 09       	sbc	r27, r11
     91e:	88 3e       	cpi	r24, 0xE8	; 232
     920:	93 40       	sbci	r25, 0x03	; 3
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	60 f3       	brcs	.-40     	; 0x900 <__stack+0x1>
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	c2 1a       	sub	r12, r18
     92c:	d1 08       	sbc	r13, r1
     92e:	e1 08       	sbc	r14, r1
     930:	f1 08       	sbc	r15, r1
     932:	88 ee       	ldi	r24, 0xE8	; 232
     934:	88 0e       	add	r8, r24
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	98 1e       	adc	r9, r24
     93a:	a1 1c       	adc	r10, r1
     93c:	b1 1c       	adc	r11, r1
     93e:	c1 14       	cp	r12, r1
     940:	d1 04       	cpc	r13, r1
     942:	e1 04       	cpc	r14, r1
     944:	f1 04       	cpc	r15, r1
     946:	19 f7       	brne	.-58     	; 0x90e <__stack+0xf>
     948:	db cf       	rjmp	.-74     	; 0x900 <__stack+0x1>
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	bf 90       	pop	r11
     954:	af 90       	pop	r10
     956:	9f 90       	pop	r9
     958:	8f 90       	pop	r8
     95a:	08 95       	ret

0000095c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     95c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     95e:	84 b5       	in	r24, 0x24	; 36
     960:	82 60       	ori	r24, 0x02	; 2
     962:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     964:	84 b5       	in	r24, 0x24	; 36
     966:	81 60       	ori	r24, 0x01	; 1
     968:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     96a:	85 b5       	in	r24, 0x25	; 37
     96c:	82 60       	ori	r24, 0x02	; 2
     96e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     970:	85 b5       	in	r24, 0x25	; 37
     972:	81 60       	ori	r24, 0x01	; 1
     974:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     976:	ee e6       	ldi	r30, 0x6E	; 110
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     980:	e1 e8       	ldi	r30, 0x81	; 129
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     986:	80 81       	ld	r24, Z
     988:	82 60       	ori	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     992:	e0 e8       	ldi	r30, 0x80	; 128
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     99c:	e1 eb       	ldi	r30, 0xB1	; 177
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	84 60       	ori	r24, 0x04	; 4
     9a4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     9a6:	e0 eb       	ldi	r30, 0xB0	; 176
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	81 60       	ori	r24, 0x01	; 1
     9ae:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     9b0:	ea e7       	ldi	r30, 0x7A	; 122
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	84 60       	ori	r24, 0x04	; 4
     9b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     9ba:	80 81       	ld	r24, Z
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     9c0:	80 81       	ld	r24, Z
     9c2:	81 60       	ori	r24, 0x01	; 1
     9c4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     9c6:	80 81       	ld	r24, Z
     9c8:	80 68       	ori	r24, 0x80	; 128
     9ca:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     9cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     9d0:	08 95       	ret

000009d2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     9d2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     9dc:	82 1b       	sub	r24, r18
     9de:	91 09       	sbc	r25, r1
     9e0:	08 95       	ret

000009e2 <_ZN7TwoWire4readEv>:
     9e2:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     9e6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     9ea:	98 17       	cp	r25, r24
     9ec:	50 f4       	brcc	.+20     	; 0xa02 <_ZN7TwoWire4readEv+0x20>
     9ee:	e9 2f       	mov	r30, r25
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	ed 58       	subi	r30, 0x8D	; 141
     9f4:	fd 4f       	sbci	r31, 0xFD	; 253
     9f6:	20 81       	ld	r18, Z
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	9f 5f       	subi	r25, 0xFF	; 255
     9fc:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <_ZN7TwoWire4readEv+0x24>
     a02:	2f ef       	ldi	r18, 0xFF	; 255
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	c9 01       	movw	r24, r18
     a08:	08 95       	ret

00000a0a <_ZN7TwoWire4peekEv>:
     a0a:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     a0e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     a12:	e8 17       	cp	r30, r24
     a14:	30 f4       	brcc	.+12     	; 0xa22 <_ZN7TwoWire4peekEv+0x18>
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	ed 58       	subi	r30, 0x8D	; 141
     a1a:	fd 4f       	sbci	r31, 0xFD	; 253
     a1c:	80 81       	ld	r24, Z
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	08 95       	ret
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	08 95       	ret

00000a28 <_ZN7TwoWire5flushEv>:
     a28:	08 95       	ret

00000a2a <_ZN7TwoWire16onReceiveServiceEPhi>:
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ec 01       	movw	r28, r24
     a30:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <_ZN7TwoWire14user_onReceiveE>
     a34:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <_ZN7TwoWire14user_onReceiveE+0x1>
     a38:	30 97       	sbiw	r30, 0x00	; 0
     a3a:	f1 f0       	breq	.+60     	; 0xa78 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     a3c:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     a40:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     a44:	98 17       	cp	r25, r24
     a46:	c0 f0       	brcs	.+48     	; 0xa78 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	29 2f       	mov	r18, r25
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	26 17       	cp	r18, r22
     a50:	37 07       	cpc	r19, r23
     a52:	54 f4       	brge	.+20     	; 0xa68 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
     a54:	de 01       	movw	r26, r28
     a56:	a2 0f       	add	r26, r18
     a58:	b3 1f       	adc	r27, r19
     a5a:	4c 91       	ld	r20, X
     a5c:	d9 01       	movw	r26, r18
     a5e:	ad 58       	subi	r26, 0x8D	; 141
     a60:	bd 4f       	sbci	r27, 0xFD	; 253
     a62:	4c 93       	st	X, r20
     a64:	9f 5f       	subi	r25, 0xFF	; 255
     a66:	f1 cf       	rjmp	.-30     	; 0xa4a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
     a68:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     a6c:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     a70:	cb 01       	movw	r24, r22
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	09 94       	ijmp
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <_ZN7TwoWire16onRequestServiceEv>:
     a7e:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <_ZN7TwoWire14user_onRequestE>
     a82:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <_ZN7TwoWire14user_onRequestE+0x1>
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	29 f0       	breq	.+10     	; 0xa94 <_ZN7TwoWire16onRequestServiceEv+0x16>
     a8a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     a8e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     a92:	09 94       	ijmp
     a94:	08 95       	ret

00000a96 <_ZN7TwoWire5writeEPKhj>:
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	7c 01       	movw	r14, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	8a 01       	movw	r16, r20
     aac:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <_ZN7TwoWire12transmittingE>
     ab0:	22 23       	and	r18, r18
     ab2:	89 f0       	breq	.+34     	; 0xad6 <_ZN7TwoWire5writeEPKhj+0x40>
     ab4:	eb 01       	movw	r28, r22
     ab6:	6b 01       	movw	r12, r22
     ab8:	c4 0e       	add	r12, r20
     aba:	d5 1e       	adc	r13, r21
     abc:	cc 15       	cp	r28, r12
     abe:	dd 05       	cpc	r29, r13
     ac0:	69 f0       	breq	.+26     	; 0xadc <_ZN7TwoWire5writeEPKhj+0x46>
     ac2:	69 91       	ld	r22, Y+
     ac4:	d7 01       	movw	r26, r14
     ac6:	ed 91       	ld	r30, X+
     ac8:	fc 91       	ld	r31, X
     aca:	01 90       	ld	r0, Z+
     acc:	f0 81       	ld	r31, Z
     ace:	e0 2d       	mov	r30, r0
     ad0:	c7 01       	movw	r24, r14
     ad2:	09 95       	icall
     ad4:	f3 cf       	rjmp	.-26     	; 0xabc <_ZN7TwoWire5writeEPKhj+0x26>
     ad6:	64 2f       	mov	r22, r20
     ad8:	0e 94 13 07 	call	0xe26	; 0xe26 <twi_transmit>
     adc:	c8 01       	movw	r24, r16
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	08 95       	ret

00000af0 <_ZN7TwoWire5writeEh>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	69 83       	std	Y+1, r22	; 0x01
     afc:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <_ZN7TwoWire12transmittingE>
     b00:	22 23       	and	r18, r18
     b02:	d1 f0       	breq	.+52     	; 0xb38 <_ZN7TwoWire5writeEh+0x48>
     b04:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     b08:	20 32       	cpi	r18, 0x20	; 32
     b0a:	40 f0       	brcs	.+16     	; 0xb1c <_ZN7TwoWire5writeEh+0x2c>
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	33 83       	std	Z+3, r19	; 0x03
     b14:	22 83       	std	Z+2, r18	; 0x02
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	15 c0       	rjmp	.+42     	; 0xb46 <_ZN7TwoWire5writeEh+0x56>
     b1c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     b20:	e8 2f       	mov	r30, r24
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e0 5b       	subi	r30, 0xB0	; 176
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	99 81       	ldd	r25, Y+1	; 0x01
     b2a:	90 83       	st	Z, r25
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     b32:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     b36:	05 c0       	rjmp	.+10     	; 0xb42 <_ZN7TwoWire5writeEh+0x52>
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 13 07 	call	0xe26	; 0xe26 <twi_transmit>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <_ZN7TwoWireC1Ev>:
     b4e:	fc 01       	movw	r30, r24
     b50:	13 82       	std	Z+3, r1	; 0x03
     b52:	12 82       	std	Z+2, r1	; 0x02
     b54:	88 ee       	ldi	r24, 0xE8	; 232
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	95 83       	std	Z+5, r25	; 0x05
     b60:	a6 83       	std	Z+6, r26	; 0x06
     b62:	b7 83       	std	Z+7, r27	; 0x07
     b64:	83 e6       	ldi	r24, 0x63	; 99
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	08 95       	ret

00000b6e <_ZN7TwoWire5beginEv>:
     b6e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     b72:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     b76:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     b7a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     b7e:	0e 94 57 06 	call	0xcae	; 0xcae <twi_init>
     b82:	8f e3       	ldi	r24, 0x3F	; 63
     b84:	95 e0       	ldi	r25, 0x05	; 5
     b86:	0e 94 40 07 	call	0xe80	; 0xe80 <twi_attachSlaveTxEvent>
     b8a:	85 e1       	ldi	r24, 0x15	; 21
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <twi_attachSlaveRxEvent>

00000b92 <_ZN7TwoWire17beginTransmissionEh>:
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <_ZN7TwoWire12transmittingE>
     b98:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <_ZN7TwoWire9txAddressE>
     b9c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     ba0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     ba4:	08 95       	ret

00000ba6 <_ZN7TwoWire17beginTransmissionEi>:
     ba6:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <_ZN7TwoWire17beginTransmissionEh>

00000baa <_ZN7TwoWire15endTransmissionEh>:
     baa:	0f 93       	push	r16
     bac:	06 2f       	mov	r16, r22
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     bb4:	60 e5       	ldi	r22, 0x50	; 80
     bb6:	72 e0       	ldi	r23, 0x02	; 2
     bb8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZN7TwoWire9txAddressE>
     bbc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_writeTo>
     bc0:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZN7TwoWire13txBufferIndexE>
     bc4:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire14txBufferLengthE>
     bc8:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZN7TwoWire12transmittingE>
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <_ZN7TwoWire11requestFromEhhmhh>:
     bd0:	4f 92       	push	r4
     bd2:	5f 92       	push	r5
     bd4:	6f 92       	push	r6
     bd6:	7f 92       	push	r7
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	5c 01       	movw	r10, r24
     bec:	f6 2e       	mov	r15, r22
     bee:	d4 2f       	mov	r29, r20
     bf0:	28 01       	movw	r4, r16
     bf2:	39 01       	movw	r6, r18
     bf4:	ee 20       	and	r14, r14
     bf6:	21 f1       	breq	.+72     	; 0xc40 <_ZN7TwoWire11requestFromEhhmhh+0x70>
     bf8:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN7TwoWire17beginTransmissionEh>
     bfc:	ce 2d       	mov	r28, r14
     bfe:	c4 30       	cpi	r28, 0x04	; 4
     c00:	08 f0       	brcs	.+2      	; 0xc04 <_ZN7TwoWire11requestFromEhhmhh+0x34>
     c02:	c3 e0       	ldi	r28, 0x03	; 3
     c04:	c1 50       	subi	r28, 0x01	; 1
     c06:	c0 f0       	brcs	.+48     	; 0xc38 <_ZN7TwoWire11requestFromEhhmhh+0x68>
     c08:	28 e0       	ldi	r18, 0x08	; 8
     c0a:	c2 9f       	mul	r28, r18
     c0c:	c0 01       	movw	r24, r0
     c0e:	11 24       	eor	r1, r1
     c10:	a3 01       	movw	r20, r6
     c12:	92 01       	movw	r18, r4
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
     c16:	56 95       	lsr	r21
     c18:	47 95       	ror	r20
     c1a:	37 95       	ror	r19
     c1c:	27 95       	ror	r18
     c1e:	8a 95       	dec	r24
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <_ZN7TwoWire11requestFromEhhmhh+0x46>
     c22:	ca 01       	movw	r24, r20
     c24:	b9 01       	movw	r22, r18
     c26:	d5 01       	movw	r26, r10
     c28:	ed 91       	ld	r30, X+
     c2a:	fc 91       	ld	r31, X
     c2c:	01 90       	ld	r0, Z+
     c2e:	f0 81       	ld	r31, Z
     c30:	e0 2d       	mov	r30, r0
     c32:	c5 01       	movw	r24, r10
     c34:	09 95       	icall
     c36:	e6 cf       	rjmp	.-52     	; 0xc04 <_ZN7TwoWire11requestFromEhhmhh+0x34>
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	c5 01       	movw	r24, r10
     c3c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN7TwoWire15endTransmissionEh>
     c40:	4d 2f       	mov	r20, r29
     c42:	d1 32       	cpi	r29, 0x21	; 33
     c44:	08 f0       	brcs	.+2      	; 0xc48 <_ZN7TwoWire11requestFromEhhmhh+0x78>
     c46:	40 e2       	ldi	r20, 0x20	; 32
     c48:	2c 2d       	mov	r18, r12
     c4a:	63 e7       	ldi	r22, 0x73	; 115
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	8f 2d       	mov	r24, r15
     c50:	0e 94 75 06 	call	0xcea	; 0xcea <twi_readFrom>
     c54:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZN7TwoWire13rxBufferIndexE>
     c58:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <_ZN7TwoWire14rxBufferLengthE>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	7f 90       	pop	r7
     c70:	6f 90       	pop	r6
     c72:	5f 90       	pop	r5
     c74:	4f 90       	pop	r4
     c76:	08 95       	ret

00000c78 <_ZN7TwoWire11requestFromEhhh>:
     c78:	cf 92       	push	r12
     c7a:	ef 92       	push	r14
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	c2 2e       	mov	r12, r18
     c82:	e1 2c       	mov	r14, r1
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	98 01       	movw	r18, r16
     c8a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN7TwoWire11requestFromEhhmhh>
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ef 90       	pop	r14
     c94:	cf 90       	pop	r12
     c96:	08 95       	ret

00000c98 <_ZN7TwoWire11requestFromEii>:
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <_ZN7TwoWire11requestFromEhhh>

00000c9e <_ZN7TwoWire15endTransmissionEv>:
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <_ZN7TwoWire15endTransmissionEh>

00000ca4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ca4:	8d e3       	ldi	r24, 0x3D	; 61
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_ZN7TwoWireC1Ev>

00000cac <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     cac:	08 95       	ret

00000cae <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     cae:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_state>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_sendStop>
     cb8:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_inRepStart>
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	82 e1       	ldi	r24, 0x12	; 18
     cc0:	0e 94 ab 08 	call	0x1156	; 0x1156 <digitalWrite>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	83 e1       	ldi	r24, 0x13	; 19
     cc8:	0e 94 ab 08 	call	0x1156	; 0x1156 <digitalWrite>
     ccc:	e9 eb       	ldi	r30, 0xB9	; 185
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	80 83       	st	Z, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	8d 7f       	andi	r24, 0xFD	; 253
     cda:	80 83       	st	Z, r24
     cdc:	88 e4       	ldi	r24, 0x48	; 72
     cde:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     ce2:	85 e4       	ldi	r24, 0x45	; 69
     ce4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ce8:	08 95       	ret

00000cea <twi_readFrom>:
     cea:	41 32       	cpi	r20, 0x21	; 33
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <twi_readFrom+0x6>
     cee:	43 c0       	rjmp	.+134    	; 0xd76 <twi_readFrom+0x8c>
     cf0:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <twi_state>
     cf4:	91 11       	cpse	r25, r1
     cf6:	fc cf       	rjmp	.-8      	; 0xcf0 <twi_readFrom+0x6>
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <twi_state>
     cfe:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <twi_sendStop>
     d02:	2f ef       	ldi	r18, 0xFF	; 255
     d04:	20 93 93 02 	sts	0x0293, r18	; 0x800293 <twi_error>
     d08:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_masterBufferIndex>
     d0c:	24 0f       	add	r18, r20
     d0e:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <twi_masterBufferLength>
     d12:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <twi_slarw>
     d16:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <twi_slarw>
     d1a:	88 0f       	add	r24, r24
     d1c:	89 2b       	or	r24, r25
     d1e:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <twi_slarw>
     d22:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_inRepStart>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	61 f4       	brne	.+24     	; 0xd42 <twi_readFrom+0x58>
     d2a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_inRepStart>
     d2e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <twi_slarw>
     d32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     d36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d3a:	83 fd       	sbrc	r24, 3
     d3c:	f8 cf       	rjmp	.-16     	; 0xd2e <twi_readFrom+0x44>
     d3e:	85 ec       	ldi	r24, 0xC5	; 197
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <twi_readFrom+0x5a>
     d42:	85 ee       	ldi	r24, 0xE5	; 229
     d44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d48:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_state>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	e1 f3       	breq	.-8      	; 0xd48 <twi_readFrom+0x5e>
     d50:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     d54:	84 17       	cp	r24, r20
     d56:	10 f4       	brcc	.+4      	; 0xd5c <twi_readFrom+0x72>
     d58:	40 91 d8 02 	lds	r20, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     d5c:	a9 ed       	ldi	r26, 0xD9	; 217
     d5e:	b2 e0       	ldi	r27, 0x02	; 2
     d60:	96 2f       	mov	r25, r22
     d62:	fb 01       	movw	r30, r22
     d64:	8e 2f       	mov	r24, r30
     d66:	89 1b       	sub	r24, r25
     d68:	84 17       	cp	r24, r20
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <twi_readFrom+0x88>
     d6c:	8d 91       	ld	r24, X+
     d6e:	81 93       	st	Z+, r24
     d70:	f9 cf       	rjmp	.-14     	; 0xd64 <twi_readFrom+0x7a>
     d72:	84 2f       	mov	r24, r20
     d74:	08 95       	ret
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	08 95       	ret

00000d7a <twi_writeTo>:
     d7a:	0f 93       	push	r16
     d7c:	41 32       	cpi	r20, 0x21	; 33
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <twi_writeTo+0x8>
     d80:	4a c0       	rjmp	.+148    	; 0xe16 <twi_writeTo+0x9c>
     d82:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <twi_state>
     d86:	91 11       	cpse	r25, r1
     d88:	fc cf       	rjmp	.-8      	; 0xd82 <twi_writeTo+0x8>
     d8a:	32 e0       	ldi	r19, 0x02	; 2
     d8c:	30 93 00 03 	sts	0x0300, r19	; 0x800300 <twi_state>
     d90:	00 93 fe 02 	sts	0x02FE, r16	; 0x8002fe <twi_sendStop>
     d94:	3f ef       	ldi	r19, 0xFF	; 255
     d96:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <twi_error>
     d9a:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_masterBufferIndex>
     d9e:	40 93 d7 02 	sts	0x02D7, r20	; 0x8002d7 <twi_masterBufferLength>
     da2:	56 2f       	mov	r21, r22
     da4:	a9 ed       	ldi	r26, 0xD9	; 217
     da6:	b2 e0       	ldi	r27, 0x02	; 2
     da8:	fb 01       	movw	r30, r22
     daa:	3e 2f       	mov	r19, r30
     dac:	35 1b       	sub	r19, r21
     dae:	34 17       	cp	r19, r20
     db0:	18 f4       	brcc	.+6      	; 0xdb8 <twi_writeTo+0x3e>
     db2:	31 91       	ld	r19, Z+
     db4:	3d 93       	st	X+, r19
     db6:	f9 cf       	rjmp	.-14     	; 0xdaa <twi_writeTo+0x30>
     db8:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_slarw>
     dbc:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <twi_slarw>
     dc0:	88 0f       	add	r24, r24
     dc2:	83 2b       	or	r24, r19
     dc4:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <twi_slarw>
     dc8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_inRepStart>
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	61 f4       	brne	.+24     	; 0xde8 <twi_writeTo+0x6e>
     dd0:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_inRepStart>
     dd4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <twi_slarw>
     dd8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ddc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     de0:	83 fd       	sbrc	r24, 3
     de2:	f8 cf       	rjmp	.-16     	; 0xdd4 <twi_writeTo+0x5a>
     de4:	85 ec       	ldi	r24, 0xC5	; 197
     de6:	01 c0       	rjmp	.+2      	; 0xdea <twi_writeTo+0x70>
     de8:	85 ee       	ldi	r24, 0xE5	; 229
     dea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     dee:	22 23       	and	r18, r18
     df0:	21 f0       	breq	.+8      	; 0xdfa <twi_writeTo+0x80>
     df2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_state>
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	d1 f3       	breq	.-12     	; 0xdee <twi_writeTo+0x74>
     dfa:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_error>
     dfe:	8f 3f       	cpi	r24, 0xFF	; 255
     e00:	79 f0       	breq	.+30     	; 0xe20 <twi_writeTo+0xa6>
     e02:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_error>
     e06:	80 32       	cpi	r24, 0x20	; 32
     e08:	41 f0       	breq	.+16     	; 0xe1a <twi_writeTo+0xa0>
     e0a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_error>
     e0e:	80 33       	cpi	r24, 0x30	; 48
     e10:	31 f0       	breq	.+12     	; 0xe1e <twi_writeTo+0xa4>
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <twi_writeTo+0xa6>
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <twi_writeTo+0xa6>
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <twi_writeTo+0xa6>
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	89 2f       	mov	r24, r25
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <twi_transmit>:
     e26:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <twi_txBufferLength>
     e2a:	26 2f       	mov	r18, r22
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	24 0f       	add	r18, r20
     e30:	31 1d       	adc	r19, r1
     e32:	21 32       	cpi	r18, 0x21	; 33
     e34:	31 05       	cpc	r19, r1
     e36:	dc f4       	brge	.+54     	; 0xe6e <twi_transmit+0x48>
     e38:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <twi_state>
     e3c:	24 30       	cpi	r18, 0x04	; 4
     e3e:	c9 f4       	brne	.+50     	; 0xe72 <twi_transmit+0x4c>
     e40:	fc 01       	movw	r30, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	86 17       	cp	r24, r22
     e48:	58 f4       	brcc	.+22     	; 0xe60 <twi_transmit+0x3a>
     e4a:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <twi_txBufferLength>
     e4e:	21 91       	ld	r18, Z+
     e50:	dc 01       	movw	r26, r24
     e52:	a9 54       	subi	r26, 0x49	; 73
     e54:	bd 4f       	sbci	r27, 0xFD	; 253
     e56:	a3 0f       	add	r26, r19
     e58:	b1 1d       	adc	r27, r1
     e5a:	2c 93       	st	X, r18
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	f3 cf       	rjmp	.-26     	; 0xe46 <twi_transmit+0x20>
     e60:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_txBufferLength>
     e64:	68 0f       	add	r22, r24
     e66:	60 93 b5 02 	sts	0x02B5, r22	; 0x8002b5 <twi_txBufferLength>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	08 95       	ret
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	08 95       	ret

00000e76 <twi_attachSlaveRxEvent>:
     e76:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <twi_onSlaveReceive+0x1>
     e7a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <twi_onSlaveReceive>
     e7e:	08 95       	ret

00000e80 <twi_attachSlaveTxEvent>:
     e80:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <twi_onSlaveTransmit+0x1>
     e84:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_onSlaveTransmit>
     e88:	08 95       	ret

00000e8a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     e8a:	85 ed       	ldi	r24, 0xD5	; 213
     e8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     e90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e94:	84 fd       	sbrc	r24, 4
     e96:	fc cf       	rjmp	.-8      	; 0xe90 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     e98:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_state>
     e9c:	08 95       	ret

00000e9e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     e9e:	85 ec       	ldi	r24, 0xC5	; 197
     ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     ea4:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_state>
     ea8:	08 95       	ret

00000eaa <__vector_24>:
}

ISR(TWI_vect)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2f 93       	push	r18
     eb6:	3f 93       	push	r19
     eb8:	4f 93       	push	r20
     eba:	5f 93       	push	r21
     ebc:	6f 93       	push	r22
     ebe:	7f 93       	push	r23
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
  switch(TW_STATUS){
     ecc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ed0:	88 7f       	andi	r24, 0xF8	; 248
     ed2:	80 36       	cpi	r24, 0x60	; 96
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_24+0x2e>
     ed6:	9e c0       	rjmp	.+316    	; 0x1014 <__vector_24+0x16a>
     ed8:	78 f5       	brcc	.+94     	; 0xf38 <__vector_24+0x8e>
     eda:	88 32       	cpi	r24, 0x28	; 40
     edc:	09 f4       	brne	.+2      	; 0xee0 <__vector_24+0x36>
     ede:	5d c0       	rjmp	.+186    	; 0xf9a <__vector_24+0xf0>
     ee0:	90 f4       	brcc	.+36     	; 0xf06 <__vector_24+0x5c>
     ee2:	80 31       	cpi	r24, 0x10	; 16
     ee4:	09 f4       	brne	.+2      	; 0xee8 <__vector_24+0x3e>
     ee6:	56 c0       	rjmp	.+172    	; 0xf94 <__vector_24+0xea>
     ee8:	38 f4       	brcc	.+14     	; 0xef8 <__vector_24+0x4e>
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <__vector_24+0x46>
     eee:	f5 c0       	rjmp	.+490    	; 0x10da <__vector_24+0x230>
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__vector_24+0x4c>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <__vector_24+0xea>
     ef6:	f5 c0       	rjmp	.+490    	; 0x10e2 <__vector_24+0x238>
     ef8:	88 31       	cpi	r24, 0x18	; 24
     efa:	09 f4       	brne	.+2      	; 0xefe <__vector_24+0x54>
     efc:	4e c0       	rjmp	.+156    	; 0xf9a <__vector_24+0xf0>
     efe:	80 32       	cpi	r24, 0x20	; 32
     f00:	09 f4       	brne	.+2      	; 0xf04 <__vector_24+0x5a>
     f02:	5f c0       	rjmp	.+190    	; 0xfc2 <__vector_24+0x118>
     f04:	ee c0       	rjmp	.+476    	; 0x10e2 <__vector_24+0x238>
     f06:	80 34       	cpi	r24, 0x40	; 64
     f08:	09 f4       	brne	.+2      	; 0xf0c <__vector_24+0x62>
     f0a:	6a c0       	rjmp	.+212    	; 0xfe0 <__vector_24+0x136>
     f0c:	58 f4       	brcc	.+22     	; 0xf24 <__vector_24+0x7a>
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	09 f4       	brne	.+2      	; 0xf14 <__vector_24+0x6a>
     f12:	57 c0       	rjmp	.+174    	; 0xfc2 <__vector_24+0x118>
     f14:	88 33       	cpi	r24, 0x38	; 56
     f16:	09 f0       	breq	.+2      	; 0xf1a <__vector_24+0x70>
     f18:	e4 c0       	rjmp	.+456    	; 0x10e2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     f1a:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <twi_error>
      twi_releaseBus();
     f1e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <twi_releaseBus>
      break;
     f22:	df c0       	rjmp	.+446    	; 0x10e2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     f24:	80 35       	cpi	r24, 0x50	; 80
     f26:	09 f4       	brne	.+2      	; 0xf2a <__vector_24+0x80>
     f28:	4f c0       	rjmp	.+158    	; 0xfc8 <__vector_24+0x11e>
     f2a:	88 35       	cpi	r24, 0x58	; 88
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__vector_24+0x86>
     f2e:	5d c0       	rjmp	.+186    	; 0xfea <__vector_24+0x140>
     f30:	88 34       	cpi	r24, 0x48	; 72
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_24+0x8c>
     f34:	d6 c0       	rjmp	.+428    	; 0x10e2 <__vector_24+0x238>
     f36:	d3 c0       	rjmp	.+422    	; 0x10de <__vector_24+0x234>
     f38:	88 39       	cpi	r24, 0x98	; 152
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__vector_24+0x94>
     f3c:	c4 c0       	rjmp	.+392    	; 0x10c6 <__vector_24+0x21c>
     f3e:	a8 f4       	brcc	.+42     	; 0xf6a <__vector_24+0xc0>
     f40:	88 37       	cpi	r24, 0x78	; 120
     f42:	09 f4       	brne	.+2      	; 0xf46 <__vector_24+0x9c>
     f44:	67 c0       	rjmp	.+206    	; 0x1014 <__vector_24+0x16a>
     f46:	38 f4       	brcc	.+14     	; 0xf56 <__vector_24+0xac>
     f48:	88 36       	cpi	r24, 0x68	; 104
     f4a:	09 f4       	brne	.+2      	; 0xf4e <__vector_24+0xa4>
     f4c:	63 c0       	rjmp	.+198    	; 0x1014 <__vector_24+0x16a>
     f4e:	80 37       	cpi	r24, 0x70	; 112
     f50:	09 f4       	brne	.+2      	; 0xf54 <__vector_24+0xaa>
     f52:	60 c0       	rjmp	.+192    	; 0x1014 <__vector_24+0x16a>
     f54:	c6 c0       	rjmp	.+396    	; 0x10e2 <__vector_24+0x238>
     f56:	88 38       	cpi	r24, 0x88	; 136
     f58:	09 f4       	brne	.+2      	; 0xf5c <__vector_24+0xb2>
     f5a:	b5 c0       	rjmp	.+362    	; 0x10c6 <__vector_24+0x21c>
     f5c:	80 39       	cpi	r24, 0x90	; 144
     f5e:	09 f4       	brne	.+2      	; 0xf62 <__vector_24+0xb8>
     f60:	5f c0       	rjmp	.+190    	; 0x1020 <__vector_24+0x176>
     f62:	80 38       	cpi	r24, 0x80	; 128
     f64:	09 f0       	breq	.+2      	; 0xf68 <__vector_24+0xbe>
     f66:	bd c0       	rjmp	.+378    	; 0x10e2 <__vector_24+0x238>
     f68:	5b c0       	rjmp	.+182    	; 0x1020 <__vector_24+0x176>
     f6a:	80 3b       	cpi	r24, 0xB0	; 176
     f6c:	09 f4       	brne	.+2      	; 0xf70 <__vector_24+0xc6>
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <__vector_24+0x1cc>
     f70:	38 f4       	brcc	.+14     	; 0xf80 <__vector_24+0xd6>
     f72:	80 3a       	cpi	r24, 0xA0	; 160
     f74:	09 f4       	brne	.+2      	; 0xf78 <__vector_24+0xce>
     f76:	66 c0       	rjmp	.+204    	; 0x1044 <__vector_24+0x19a>
     f78:	88 3a       	cpi	r24, 0xA8	; 168
     f7a:	09 f4       	brne	.+2      	; 0xf7e <__vector_24+0xd4>
     f7c:	7c c0       	rjmp	.+248    	; 0x1076 <__vector_24+0x1cc>
     f7e:	b1 c0       	rjmp	.+354    	; 0x10e2 <__vector_24+0x238>
     f80:	80 3c       	cpi	r24, 0xC0	; 192
     f82:	09 f4       	brne	.+2      	; 0xf86 <__vector_24+0xdc>
     f84:	a4 c0       	rjmp	.+328    	; 0x10ce <__vector_24+0x224>
     f86:	88 3c       	cpi	r24, 0xC8	; 200
     f88:	09 f4       	brne	.+2      	; 0xf8c <__vector_24+0xe2>
     f8a:	a1 c0       	rjmp	.+322    	; 0x10ce <__vector_24+0x224>
     f8c:	88 3b       	cpi	r24, 0xB8	; 184
     f8e:	09 f4       	brne	.+2      	; 0xf92 <__vector_24+0xe8>
     f90:	87 c0       	rjmp	.+270    	; 0x10a0 <__vector_24+0x1f6>
     f92:	a7 c0       	rjmp	.+334    	; 0x10e2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     f94:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <twi_slarw>
     f98:	10 c0       	rjmp	.+32     	; 0xfba <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f9a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     f9e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_masterBufferLength>
     fa2:	98 17       	cp	r25, r24
     fa4:	70 f5       	brcc	.+92     	; 0x1002 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     fa6:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8e 0f       	add	r24, r30
     fae:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_masterBufferIndex>
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	e7 52       	subi	r30, 0x27	; 39
     fb6:	fd 4f       	sbci	r31, 0xFD	; 253
     fb8:	80 81       	ld	r24, Z
     fba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     fbe:	85 ec       	ldi	r24, 0xC5	; 197
     fc0:	83 c0       	rjmp	.+262    	; 0x10c8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     fc2:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <twi_error>
     fc6:	8b c0       	rjmp	.+278    	; 0x10de <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     fc8:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8e 0f       	add	r24, r30
     fd0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_masterBufferIndex>
     fd4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	e7 52       	subi	r30, 0x27	; 39
     fdc:	fd 4f       	sbci	r31, 0xFD	; 253
     fde:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     fe0:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     fe4:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_masterBufferLength>
     fe8:	6b c0       	rjmp	.+214    	; 0x10c0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     fea:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <twi_masterBufferIndex>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	8e 0f       	add	r24, r30
     ff2:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_masterBufferIndex>
     ff6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	e7 52       	subi	r30, 0x27	; 39
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	80 83       	st	Z, r24
	if (twi_sendStop)
    1002:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_sendStop>
    1006:	81 11       	cpse	r24, r1
    1008:	6a c0       	rjmp	.+212    	; 0x10de <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1010:	84 ea       	ldi	r24, 0xA4	; 164
    1012:	5e c0       	rjmp	.+188    	; 0x10d0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    101a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <twi_rxBufferIndex>
    101e:	cf cf       	rjmp	.-98     	; 0xfbe <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1020:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <twi_rxBufferIndex>
    1024:	80 32       	cpi	r24, 0x20	; 32
    1026:	08 f0       	brcs	.+2      	; 0x102a <__vector_24+0x180>
    1028:	4e c0       	rjmp	.+156    	; 0x10c6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    102a:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <twi_rxBufferIndex>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8e 0f       	add	r24, r30
    1032:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <twi_rxBufferIndex>
    1036:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	eb 56       	subi	r30, 0x6B	; 107
    103e:	fd 4f       	sbci	r31, 0xFD	; 253
    1040:	80 83       	st	Z, r24
    1042:	bd cf       	rjmp	.-134    	; 0xfbe <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1044:	0e 94 4f 07 	call	0xe9e	; 0xe9e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1048:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <twi_rxBufferIndex>
    104c:	80 32       	cpi	r24, 0x20	; 32
    104e:	30 f4       	brcc	.+12     	; 0x105c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1050:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <twi_rxBufferIndex>
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	eb 56       	subi	r30, 0x6B	; 107
    1058:	fd 4f       	sbci	r31, 0xFD	; 253
    105a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    105c:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <twi_rxBufferIndex>
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <twi_onSlaveReceive>
    1066:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <twi_onSlaveReceive+0x1>
    106a:	85 e9       	ldi	r24, 0x95	; 149
    106c:	92 e0       	ldi	r25, 0x02	; 2
    106e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1070:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <twi_rxBufferIndex>
      break;
    1074:	36 c0       	rjmp	.+108    	; 0x10e2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    107c:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1080:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1084:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_onSlaveTransmit>
    1088:	f0 91 fc 02 	lds	r31, 0x02FC	; 0x8002fc <twi_onSlaveTransmit+0x1>
    108c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    108e:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_txBufferLength>
    1092:	81 11       	cpse	r24, r1
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    109c:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    10a0:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_txBufferIndex>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8e 0f       	add	r24, r30
    10a8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <twi_txBufferIndex>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	e9 54       	subi	r30, 0x49	; 73
    10b0:	fd 4f       	sbci	r31, 0xFD	; 253
    10b2:	80 81       	ld	r24, Z
    10b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    10b8:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <twi_txBufferIndex>
    10bc:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_txBufferLength>
    10c0:	98 17       	cp	r25, r24
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <__vector_24+0x21c>
    10c4:	7c cf       	rjmp	.-264    	; 0xfbe <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10c6:	85 e8       	ldi	r24, 0x85	; 133
    10c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10ce:	85 ec       	ldi	r24, 0xC5	; 197
    10d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    10d4:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_state>
      break;
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    10da:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <twi_error>
      twi_stop();
    10de:	0e 94 45 07 	call	0xe8a	; 0xe8a <twi_stop>
      break;
  }
}
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	81 f0       	breq	.+32     	; 0x1128 <turnOffPWM+0x24>
    1108:	28 f4       	brcc	.+10     	; 0x1114 <turnOffPWM+0x10>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	99 f0       	breq	.+38     	; 0x1134 <turnOffPWM+0x30>
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	a1 f0       	breq	.+40     	; 0x113a <turnOffPWM+0x36>
    1112:	08 95       	ret
    1114:	87 30       	cpi	r24, 0x07	; 7
    1116:	a9 f0       	breq	.+42     	; 0x1142 <turnOffPWM+0x3e>
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	b9 f0       	breq	.+46     	; 0x114a <turnOffPWM+0x46>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	d1 f4       	brne	.+52     	; 0x1154 <turnOffPWM+0x50>
    1120:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1124:	8f 7d       	andi	r24, 0xDF	; 223
    1126:	03 c0       	rjmp	.+6      	; 0x112e <turnOffPWM+0x2a>
    1128:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1132:	08 95       	ret
    1134:	84 b5       	in	r24, 0x24	; 36
    1136:	8f 77       	andi	r24, 0x7F	; 127
    1138:	02 c0       	rjmp	.+4      	; 0x113e <turnOffPWM+0x3a>
    113a:	84 b5       	in	r24, 0x24	; 36
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	84 bd       	out	0x24, r24	; 36
    1140:	08 95       	ret
    1142:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1146:	8f 77       	andi	r24, 0x7F	; 127
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <turnOffPWM+0x4c>
    114a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1154:	08 95       	ret

00001156 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	e8 59       	subi	r30, 0x98	; 152
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1168:	f9 01       	movw	r30, r18
    116a:	e4 58       	subi	r30, 0x84	; 132
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1170:	f9 01       	movw	r30, r18
    1172:	e0 57       	subi	r30, 0x70	; 112
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1178:	cc 23       	and	r28, r28
    117a:	c1 f0       	breq	.+48     	; 0x11ac <digitalWrite+0x56>
    117c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    117e:	81 11       	cpse	r24, r1
    1180:	0e 94 82 08 	call	0x1104	; 0x1104 <turnOffPWM>

	out = portOutputRegister(port);
    1184:	ec 2f       	mov	r30, r28
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	ec 55       	subi	r30, 0x5C	; 92
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	a5 91       	lpm	r26, Z+
    1192:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1194:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1196:	f8 94       	cli

	if (val == LOW) {
    1198:	11 11       	cpse	r17, r1
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <digitalWrite+0x4e>
		*out &= ~bit;
    119c:	8c 91       	ld	r24, X
    119e:	d0 95       	com	r29
    11a0:	d8 23       	and	r29, r24
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    11a4:	ec 91       	ld	r30, X
    11a6:	de 2b       	or	r29, r30
    11a8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11aa:	9f bf       	out	0x3f, r25	; 63
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	08 95       	ret

000011b4 <__udivmodsi4>:
    11b4:	a1 e2       	ldi	r26, 0x21	; 33
    11b6:	1a 2e       	mov	r1, r26
    11b8:	aa 1b       	sub	r26, r26
    11ba:	bb 1b       	sub	r27, r27
    11bc:	fd 01       	movw	r30, r26
    11be:	0d c0       	rjmp	.+26     	; 0x11da <__udivmodsi4_ep>

000011c0 <__udivmodsi4_loop>:
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	ee 1f       	adc	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	a2 17       	cp	r26, r18
    11ca:	b3 07       	cpc	r27, r19
    11cc:	e4 07       	cpc	r30, r20
    11ce:	f5 07       	cpc	r31, r21
    11d0:	20 f0       	brcs	.+8      	; 0x11da <__udivmodsi4_ep>
    11d2:	a2 1b       	sub	r26, r18
    11d4:	b3 0b       	sbc	r27, r19
    11d6:	e4 0b       	sbc	r30, r20
    11d8:	f5 0b       	sbc	r31, r21

000011da <__udivmodsi4_ep>:
    11da:	66 1f       	adc	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	1a 94       	dec	r1
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <__udivmodsi4_loop>
    11e6:	60 95       	com	r22
    11e8:	70 95       	com	r23
    11ea:	80 95       	com	r24
    11ec:	90 95       	com	r25
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	bd 01       	movw	r22, r26
    11f4:	cf 01       	movw	r24, r30
    11f6:	08 95       	ret

000011f8 <__tablejump2__>:
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	05 90       	lpm	r0, Z+
    11fe:	f4 91       	lpm	r31, Z
    1200:	e0 2d       	mov	r30, r0
    1202:	09 94       	ijmp

00001204 <_exit>:
    1204:	f8 94       	cli

00001206 <__stop_program>:
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <__stop_program>
